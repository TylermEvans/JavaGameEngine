#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void){
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1,0.2);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitCamVector = normalize(toCameraVector);
	vec3 lightDir = -unitLightVector;
	vec3 reflectedLightDir = reflect(lightDir, unitNormal);
	
	float specFactor = dot(reflectedLightDir, unitCamVector);
	specFactor = max(specFactor,0.0);
	float dampedFactor = pow(specFactor, shineDamper);
	vec3 finalSpec = dampedFactor * reflectivity *lightColor;
	
	out_color = vec4(diffuse,1.0)*texture(textureSampler, pass_textureCoords) + vec4(finalSpec, 1.0);

}